Q1a:
private String recombine(String word1, String word2){
    int half1 = word1.length/2;
    int half2 = word2.length/2;
    return word1.substring(0, half1) + word2.substring(half2);
}

Q1b:
private String[] mixedWOrds(String[] words){
    String[] mWords = new String[words.length];
    for(int i=0; i<words.length; i+=2){
        mWords[i] = recombine(words[i], words[i+1]);
        mWords[i+1] = recombine(words[i+1], words[i])
    }
    return mWords;
}


Q2a:
public static int getPeakIndex(int[] array){

    for(int i=0; i<array.length-1; i++){
        if(isIncreasing(array, i) && isDecreasing(array, i)){
            return i;
        }
    }
    
    return -1;
}

Q2b:
public static boolean isMountain(int[] array){
    
    int peakIndex = getPeakIndex(array);
    if(peakIndex < 0) return false;

    for(int i=peakIndex; i<array.length-1;i++){
        if(!isDecreasing(array, i)) return false;
    }

    for(int i=peakIndex; i>=0; i--){
        if(!isIncreasing(array, i)) return false;
    }

    return true;
}


Q3a:
private double computeTemp(int row, int col){
    int mRow = temps.length;
    int mCol = temps[0].length;

    if(row == 0 || row == mRow-1 || col == 0 || col == mCol-1){
        return temps[row][col];
    }

    double sum = 0;
    sum += temps[row-1][col]; // top
    sum += temps[row+1][col]; // bottom
    sum += temps[row][col-1]; // left
    sum += temps[row][col+1]; // right
    sum /= 4;
    return sum;
}

Q3b:
public boolean updateAllTemps(double tolerance){
	boolean isWithin = true;
    for(int i=0; i<temps.length; i++){
        for(int j=0; j<temps[0].length; j++){
			double newTemp = computeTemp(temps[i][j]);
			if(Math.abs(temps[i][j] - newTemp) > tolerance){
				isWithin = false;
			}
			temps[i][j] = newTemp;
        }
    }
	return isWithin;
}

Q4a:
public boolean record(int score){
	for(ScoreInfo score: scoreList){
		if(score.getScore() == score){
			score.increment();
			return false;
		}
	}
	ScoreInfo scoreInfo = new ScoreInfo(score);
	for(int i=0;i<scoreList.size(); i++){
		if(scoreInfo.getScore() < scoreList.get(i).getScore()){
			scoreList.add(i, scoreInfo);
			return true;
		}
	}
	
	return true;
}

Q4b:
public void recordScores(int[] stuScores){
	for(int score: stuScores){
		record(score);
	}
}


