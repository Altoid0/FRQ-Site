https://apcentral.collegeboard.org/pdf/ap-computer-science-a-frq-2017.pdf
https://secure-media.collegeboard.org/ap/pdf/ap17-sg-comp-sci-a.pdf
27min

1A:
-1, construct digitList
4/5
public Digits(int num){

	if(num == 0){
		digitList.add(num);
	}
	
	while(num > 0){
		int lastDigit = num % 10;
		digitList.add(0, lastDigit);
		num = num / 10;
	}
}

4/4
1B:
public boolean isStrictlyIncreasing(){
	for(int i=1; i<digitList.size(); i++){
		if(digitList.get(i) <= digitList.get(i-1)){
			return false;
		}
	}
	return true;
}

5/5
3A:
public void replaceNthOccurence(String str, int n, String repl){
	int index = findNthOccurence(str, n);
	if(index < 0) return;
	currentPhrase = currentPhrase.substring(0, index) + str + currentPhrase.substring(index+str.length());
}

4/4
3B:
public int findLastOccurence(String str){
	int occurence = 0;
	int index = 0; // initial val
	while(index >= 0){
		occurence++;
		index = findNthOccurence(str, occurence);
	}
	return index;
}

5/5
4A:
public static Position findPosition(int num, int[][] intArr){
	for(int r=0; r<intArr.length; r++){
		for(int c=0; c<intArr[0].length; c++){
			if(intArr[r][c] == num){
				return new Position(r, c);
			}
		}
	}
	return null;
}

4/4
4B:
public static Position[][] getSuccessorArray(int[][] intArr){
	Position[][] positions = new Position[intArr.length][intArr[0].length];
	for(int r=0; r<intArr.length; r++){
		for(int c=0; c<intArr[0].length; c++){
			positions[r][c] = findPosition(intArr[r][c]+1, intArr);
		}
	}
	return positions;
}